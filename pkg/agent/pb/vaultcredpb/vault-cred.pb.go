// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.12.4
// source: vault-cred.proto

package vaultcredpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatusCode int32

const (
	StatusCode_OK               StatusCode = 0
	StatusCode_INTERNRAL_ERROR  StatusCode = 1
	StatusCode_INVALID_ARGUMENT StatusCode = 2
	StatusCode_NOT_FOUND        StatusCode = 3
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0: "OK",
		1: "INTERNRAL_ERROR",
		2: "INVALID_ARGUMENT",
		3: "NOT_FOUND",
	}
	StatusCode_value = map[string]int32{
		"OK":               0,
		"INTERNRAL_ERROR":  1,
		"INVALID_ARGUMENT": 2,
		"NOT_FOUND":        3,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_vault_cred_proto_enumTypes[0].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_vault_cred_proto_enumTypes[0]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{0}
}

type SecretAccess int32

const (
	SecretAccess_READ  SecretAccess = 0
	SecretAccess_WRITE SecretAccess = 1
)

// Enum value maps for SecretAccess.
var (
	SecretAccess_name = map[int32]string{
		0: "READ",
		1: "WRITE",
	}
	SecretAccess_value = map[string]int32{
		"READ":  0,
		"WRITE": 1,
	}
)

func (x SecretAccess) Enum() *SecretAccess {
	p := new(SecretAccess)
	*p = x
	return p
}

func (x SecretAccess) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecretAccess) Descriptor() protoreflect.EnumDescriptor {
	return file_vault_cred_proto_enumTypes[1].Descriptor()
}

func (SecretAccess) Type() protoreflect.EnumType {
	return &file_vault_cred_proto_enumTypes[1]
}

func (x SecretAccess) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecretAccess.Descriptor instead.
func (SecretAccess) EnumDescriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{1}
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampInput string `protobuf:"bytes,1,opt,name=SampInput,proto3" json:"SampInput,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{0}
}

func (x *PingRequest) GetSampInput() string {
	if x != nil {
		return x.SampInput
	}
	return ""
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=vaultcredpb.StatusCode" json:"status,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{1}
}

func (x *PingResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

type SecretPathRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretPath string `protobuf:"bytes,1,opt,name=SecretPath,proto3" json:"SecretPath,omitempty"`
	SecretKey  string `protobuf:"bytes,2,opt,name=SecretKey,proto3" json:"SecretKey,omitempty"`
	Property   string `protobuf:"bytes,3,opt,name=property,proto3" json:"property,omitempty"`
}

func (x *SecretPathRef) Reset() {
	*x = SecretPathRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretPathRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretPathRef) ProtoMessage() {}

func (x *SecretPathRef) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretPathRef.ProtoReflect.Descriptor instead.
func (*SecretPathRef) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{2}
}

func (x *SecretPathRef) GetSecretPath() string {
	if x != nil {
		return x.SecretPath
	}
	return ""
}

func (x *SecretPathRef) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *SecretPathRef) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

type ConfigureVaultSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretName     string           `protobuf:"bytes,1,opt,name=secretName,proto3" json:"secretName,omitempty"`
	Namespace      string           `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	SecretPathData []*SecretPathRef `protobuf:"bytes,3,rep,name=SecretPathData,proto3" json:"SecretPathData,omitempty"`
	DomainName     string           `protobuf:"bytes,4,opt,name=domainName,proto3" json:"domainName,omitempty"`
}

func (x *ConfigureVaultSecretRequest) Reset() {
	*x = ConfigureVaultSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureVaultSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureVaultSecretRequest) ProtoMessage() {}

func (x *ConfigureVaultSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureVaultSecretRequest.ProtoReflect.Descriptor instead.
func (*ConfigureVaultSecretRequest) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigureVaultSecretRequest) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *ConfigureVaultSecretRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ConfigureVaultSecretRequest) GetSecretPathData() []*SecretPathRef {
	if x != nil {
		return x.SecretPathData
	}
	return nil
}

func (x *ConfigureVaultSecretRequest) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

type ConfigureVaultSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=vaultcredpb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *ConfigureVaultSecretResponse) Reset() {
	*x = ConfigureVaultSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureVaultSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureVaultSecretResponse) ProtoMessage() {}

func (x *ConfigureVaultSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureVaultSecretResponse.ProtoReflect.Descriptor instead.
func (*ConfigureVaultSecretResponse) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigureVaultSecretResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *ConfigureVaultSecretResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type GetCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialType string `protobuf:"bytes,1,opt,name=credentialType,proto3" json:"credentialType,omitempty"`
	CredEntityName string `protobuf:"bytes,2,opt,name=credEntityName,proto3" json:"credEntityName,omitempty"`
	CredIdentifier string `protobuf:"bytes,3,opt,name=credIdentifier,proto3" json:"credIdentifier,omitempty"`
}

func (x *GetCredentialRequest) Reset() {
	*x = GetCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialRequest) ProtoMessage() {}

func (x *GetCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialRequest.ProtoReflect.Descriptor instead.
func (*GetCredentialRequest) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{5}
}

func (x *GetCredentialRequest) GetCredentialType() string {
	if x != nil {
		return x.CredentialType
	}
	return ""
}

func (x *GetCredentialRequest) GetCredEntityName() string {
	if x != nil {
		return x.CredEntityName
	}
	return ""
}

func (x *GetCredentialRequest) GetCredIdentifier() string {
	if x != nil {
		return x.CredIdentifier
	}
	return ""
}

type GetCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// service-cred credential, for example: "userName": "iam-root", "password:: "hello"
	// client-cert credential, for example: "clientId": "intelops-user", "ca.crt": "...", "client.crt": "...", "client.key": "..."
	Credential map[string]string `protobuf:"bytes,1,rep,name=credential,proto3" json:"credential,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetCredentialResponse) Reset() {
	*x = GetCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialResponse) ProtoMessage() {}

func (x *GetCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialResponse.ProtoReflect.Descriptor instead.
func (*GetCredentialResponse) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{6}
}

func (x *GetCredentialResponse) GetCredential() map[string]string {
	if x != nil {
		return x.Credential
	}
	return nil
}

type PutCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialType string `protobuf:"bytes,1,opt,name=credentialType,proto3" json:"credentialType,omitempty"`
	CredEntityName string `protobuf:"bytes,2,opt,name=credEntityName,proto3" json:"credEntityName,omitempty"`
	CredIdentifier string `protobuf:"bytes,3,opt,name=credIdentifier,proto3" json:"credIdentifier,omitempty"`
	// service-cred credential, for example: "userName": "iam-root", "password:: "hello"
	// client-cert credential, for example: "clientId": "intelops-user", "ca.crt": "...", "client.crt": "...", "client.key": "..."
	Credential map[string]string `protobuf:"bytes,6,rep,name=credential,proto3" json:"credential,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PutCredentialRequest) Reset() {
	*x = PutCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCredentialRequest) ProtoMessage() {}

func (x *PutCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCredentialRequest.ProtoReflect.Descriptor instead.
func (*PutCredentialRequest) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{7}
}

func (x *PutCredentialRequest) GetCredentialType() string {
	if x != nil {
		return x.CredentialType
	}
	return ""
}

func (x *PutCredentialRequest) GetCredEntityName() string {
	if x != nil {
		return x.CredEntityName
	}
	return ""
}

func (x *PutCredentialRequest) GetCredIdentifier() string {
	if x != nil {
		return x.CredIdentifier
	}
	return ""
}

func (x *PutCredentialRequest) GetCredential() map[string]string {
	if x != nil {
		return x.Credential
	}
	return nil
}

type PutCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PutCredentialResponse) Reset() {
	*x = PutCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCredentialResponse) ProtoMessage() {}

func (x *PutCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCredentialResponse.ProtoReflect.Descriptor instead.
func (*PutCredentialResponse) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{8}
}

type DeleteCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialType string `protobuf:"bytes,1,opt,name=credentialType,proto3" json:"credentialType,omitempty"`
	CredEntityName string `protobuf:"bytes,2,opt,name=credEntityName,proto3" json:"credEntityName,omitempty"`
	CredIdentifier string `protobuf:"bytes,3,opt,name=credIdentifier,proto3" json:"credIdentifier,omitempty"`
}

func (x *DeleteCredentialRequest) Reset() {
	*x = DeleteCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCredentialRequest) ProtoMessage() {}

func (x *DeleteCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCredentialRequest.ProtoReflect.Descriptor instead.
func (*DeleteCredentialRequest) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteCredentialRequest) GetCredentialType() string {
	if x != nil {
		return x.CredentialType
	}
	return ""
}

func (x *DeleteCredentialRequest) GetCredEntityName() string {
	if x != nil {
		return x.CredEntityName
	}
	return ""
}

func (x *DeleteCredentialRequest) GetCredIdentifier() string {
	if x != nil {
		return x.CredIdentifier
	}
	return ""
}

type DeleteCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCredentialResponse) Reset() {
	*x = DeleteCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCredentialResponse) ProtoMessage() {}

func (x *DeleteCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCredentialResponse.ProtoReflect.Descriptor instead.
func (*DeleteCredentialResponse) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{10}
}

type CreateAppRoleTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppRoleName string   `protobuf:"bytes,1,opt,name=appRoleName,proto3" json:"appRoleName,omitempty"`
	SecretPaths []string `protobuf:"bytes,2,rep,name=secretPaths,proto3" json:"secretPaths,omitempty"`
}

func (x *CreateAppRoleTokenRequest) Reset() {
	*x = CreateAppRoleTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppRoleTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppRoleTokenRequest) ProtoMessage() {}

func (x *CreateAppRoleTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppRoleTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateAppRoleTokenRequest) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{11}
}

func (x *CreateAppRoleTokenRequest) GetAppRoleName() string {
	if x != nil {
		return x.AppRoleName
	}
	return ""
}

func (x *CreateAppRoleTokenRequest) GetSecretPaths() []string {
	if x != nil {
		return x.SecretPaths
	}
	return nil
}

type CreateAppRoleTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateAppRoleTokenResponse) Reset() {
	*x = CreateAppRoleTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppRoleTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppRoleTokenResponse) ProtoMessage() {}

func (x *CreateAppRoleTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppRoleTokenResponse.ProtoReflect.Descriptor instead.
func (*CreateAppRoleTokenResponse) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{12}
}

func (x *CreateAppRoleTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DeleteAppRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleName string `protobuf:"bytes,1,opt,name=roleName,proto3" json:"roleName,omitempty"`
}

func (x *DeleteAppRoleRequest) Reset() {
	*x = DeleteAppRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppRoleRequest) ProtoMessage() {}

func (x *DeleteAppRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppRoleRequest.ProtoReflect.Descriptor instead.
func (*DeleteAppRoleRequest) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteAppRoleRequest) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

type DeleteAppRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=vaultcredpb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *DeleteAppRoleResponse) Reset() {
	*x = DeleteAppRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppRoleResponse) ProtoMessage() {}

func (x *DeleteAppRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppRoleResponse.ProtoReflect.Descriptor instead.
func (*DeleteAppRoleResponse) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteAppRoleResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *DeleteAppRoleResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type GetCredentialWithAppRoleTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	SecretPath string `protobuf:"bytes,2,opt,name=secretPath,proto3" json:"secretPath,omitempty"`
}

func (x *GetCredentialWithAppRoleTokenRequest) Reset() {
	*x = GetCredentialWithAppRoleTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialWithAppRoleTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialWithAppRoleTokenRequest) ProtoMessage() {}

func (x *GetCredentialWithAppRoleTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialWithAppRoleTokenRequest.ProtoReflect.Descriptor instead.
func (*GetCredentialWithAppRoleTokenRequest) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{15}
}

func (x *GetCredentialWithAppRoleTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetCredentialWithAppRoleTokenRequest) GetSecretPath() string {
	if x != nil {
		return x.SecretPath
	}
	return ""
}

type GetCredentialWithAppRoleTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential map[string]string `protobuf:"bytes,1,rep,name=credential,proto3" json:"credential,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetCredentialWithAppRoleTokenResponse) Reset() {
	*x = GetCredentialWithAppRoleTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialWithAppRoleTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialWithAppRoleTokenResponse) ProtoMessage() {}

func (x *GetCredentialWithAppRoleTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialWithAppRoleTokenResponse.ProtoReflect.Descriptor instead.
func (*GetCredentialWithAppRoleTokenResponse) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{16}
}

func (x *GetCredentialWithAppRoleTokenResponse) GetCredential() map[string]string {
	if x != nil {
		return x.Credential
	}
	return nil
}

type SecretPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretPath string       `protobuf:"bytes,1,opt,name=secretPath,proto3" json:"secretPath,omitempty"`
	Access     SecretAccess `protobuf:"varint,2,opt,name=access,proto3,enum=vaultcredpb.SecretAccess" json:"access,omitempty"`
}

func (x *SecretPolicy) Reset() {
	*x = SecretPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretPolicy) ProtoMessage() {}

func (x *SecretPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretPolicy.ProtoReflect.Descriptor instead.
func (*SecretPolicy) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{17}
}

func (x *SecretPolicy) GetSecretPath() string {
	if x != nil {
		return x.SecretPath
	}
	return ""
}

func (x *SecretPolicy) GetAccess() SecretAccess {
	if x != nil {
		return x.Access
	}
	return SecretAccess_READ
}

type CreateK8SAuthRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleName        string          `protobuf:"bytes,1,opt,name=roleName,proto3" json:"roleName,omitempty"`
	SecretPolicy    []*SecretPolicy `protobuf:"bytes,2,rep,name=secretPolicy,proto3" json:"secretPolicy,omitempty"`
	ClusterName     string          `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Namespaces      []string        `protobuf:"bytes,4,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	ServiceAccounts []string        `protobuf:"bytes,5,rep,name=serviceAccounts,proto3" json:"serviceAccounts,omitempty"`
}

func (x *CreateK8SAuthRoleRequest) Reset() {
	*x = CreateK8SAuthRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateK8SAuthRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SAuthRoleRequest) ProtoMessage() {}

func (x *CreateK8SAuthRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SAuthRoleRequest.ProtoReflect.Descriptor instead.
func (*CreateK8SAuthRoleRequest) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{18}
}

func (x *CreateK8SAuthRoleRequest) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *CreateK8SAuthRoleRequest) GetSecretPolicy() []*SecretPolicy {
	if x != nil {
		return x.SecretPolicy
	}
	return nil
}

func (x *CreateK8SAuthRoleRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateK8SAuthRoleRequest) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *CreateK8SAuthRoleRequest) GetServiceAccounts() []string {
	if x != nil {
		return x.ServiceAccounts
	}
	return nil
}

type CreateK8SAuthRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=vaultcredpb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *CreateK8SAuthRoleResponse) Reset() {
	*x = CreateK8SAuthRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateK8SAuthRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SAuthRoleResponse) ProtoMessage() {}

func (x *CreateK8SAuthRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SAuthRoleResponse.ProtoReflect.Descriptor instead.
func (*CreateK8SAuthRoleResponse) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{19}
}

func (x *CreateK8SAuthRoleResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *CreateK8SAuthRoleResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type UpdateK8SAuthRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleName     string          `protobuf:"bytes,1,opt,name=roleName,proto3" json:"roleName,omitempty"`
	SecretPolicy []*SecretPolicy `protobuf:"bytes,2,rep,name=secretPolicy,proto3" json:"secretPolicy,omitempty"`
	ClusterName  string          `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (x *UpdateK8SAuthRoleRequest) Reset() {
	*x = UpdateK8SAuthRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateK8SAuthRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateK8SAuthRoleRequest) ProtoMessage() {}

func (x *UpdateK8SAuthRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateK8SAuthRoleRequest.ProtoReflect.Descriptor instead.
func (*UpdateK8SAuthRoleRequest) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateK8SAuthRoleRequest) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *UpdateK8SAuthRoleRequest) GetSecretPolicy() []*SecretPolicy {
	if x != nil {
		return x.SecretPolicy
	}
	return nil
}

func (x *UpdateK8SAuthRoleRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type UpdateK8SAuthRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=vaultcredpb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *UpdateK8SAuthRoleResponse) Reset() {
	*x = UpdateK8SAuthRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateK8SAuthRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateK8SAuthRoleResponse) ProtoMessage() {}

func (x *UpdateK8SAuthRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateK8SAuthRoleResponse.ProtoReflect.Descriptor instead.
func (*UpdateK8SAuthRoleResponse) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateK8SAuthRoleResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *UpdateK8SAuthRoleResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type DeleteK8SAuthRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleName    string `protobuf:"bytes,1,opt,name=roleName,proto3" json:"roleName,omitempty"`
	ClusterName string `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (x *DeleteK8SAuthRoleRequest) Reset() {
	*x = DeleteK8SAuthRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteK8SAuthRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteK8SAuthRoleRequest) ProtoMessage() {}

func (x *DeleteK8SAuthRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteK8SAuthRoleRequest.ProtoReflect.Descriptor instead.
func (*DeleteK8SAuthRoleRequest) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteK8SAuthRoleRequest) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *DeleteK8SAuthRoleRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type DeleteK8SAuthRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=vaultcredpb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *DeleteK8SAuthRoleResponse) Reset() {
	*x = DeleteK8SAuthRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteK8SAuthRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteK8SAuthRoleResponse) ProtoMessage() {}

func (x *DeleteK8SAuthRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteK8SAuthRoleResponse.ProtoReflect.Descriptor instead.
func (*DeleteK8SAuthRoleResponse) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteK8SAuthRoleResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *DeleteK8SAuthRoleResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type AddClusterK8SAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Host        string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	CaCert      string `protobuf:"bytes,3,opt,name=caCert,proto3" json:"caCert,omitempty"`
	JwtToken    string `protobuf:"bytes,4,opt,name=jwtToken,proto3" json:"jwtToken,omitempty"`
}

func (x *AddClusterK8SAuthRequest) Reset() {
	*x = AddClusterK8SAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddClusterK8SAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterK8SAuthRequest) ProtoMessage() {}

func (x *AddClusterK8SAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterK8SAuthRequest.ProtoReflect.Descriptor instead.
func (*AddClusterK8SAuthRequest) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{24}
}

func (x *AddClusterK8SAuthRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *AddClusterK8SAuthRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AddClusterK8SAuthRequest) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

func (x *AddClusterK8SAuthRequest) GetJwtToken() string {
	if x != nil {
		return x.JwtToken
	}
	return ""
}

type AddClusterK8SAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=vaultcredpb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *AddClusterK8SAuthResponse) Reset() {
	*x = AddClusterK8SAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddClusterK8SAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterK8SAuthResponse) ProtoMessage() {}

func (x *AddClusterK8SAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterK8SAuthResponse.ProtoReflect.Descriptor instead.
func (*AddClusterK8SAuthResponse) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{25}
}

func (x *AddClusterK8SAuthResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *AddClusterK8SAuthResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type DeleteClusterK8SAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (x *DeleteClusterK8SAuthRequest) Reset() {
	*x = DeleteClusterK8SAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterK8SAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterK8SAuthRequest) ProtoMessage() {}

func (x *DeleteClusterK8SAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterK8SAuthRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterK8SAuthRequest) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteClusterK8SAuthRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type DeleteClusterK8SAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=vaultcredpb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *DeleteClusterK8SAuthResponse) Reset() {
	*x = DeleteClusterK8SAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_cred_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterK8SAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterK8SAuthResponse) ProtoMessage() {}

func (x *DeleteClusterK8SAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vault_cred_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterK8SAuthResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterK8SAuthResponse) Descriptor() ([]byte, []int) {
	return file_vault_cred_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteClusterK8SAuthResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *DeleteClusterK8SAuthResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

var File_vault_cred_proto protoreflect.FileDescriptor

var file_vault_cred_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x63, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x22,
	0x2b, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x3f, 0x0a, 0x0c,
	0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x69, 0x0a,
	0x0d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x66, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0xbf, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x66, 0x52, 0x0e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x1c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72,
	0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0xaa, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xa0, 0x02, 0x0a, 0x14, 0x50, 0x75, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x51, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64,
	0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x17, 0x0a, 0x15, 0x50, 0x75, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x72, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22,
	0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x52,
	0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0x32, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x32, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x5c, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x22, 0xca, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x61, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x31, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x72, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4b, 0x38, 0x53, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38,
	0x53, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4b, 0x38, 0x53, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x72, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x38, 0x53, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x43,
	0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x77, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x77, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x72, 0x0a,
	0x19, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x38, 0x53, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x3f, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4b, 0x38, 0x53, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x75, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4b, 0x38, 0x53, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x4e, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x52, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x2a, 0x23, 0x0a, 0x0c, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x01, 0x32, 0xe6,
	0x09, 0x0a, 0x09, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x21, 0x2e,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d, 0x50, 0x75, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x21, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63,
	0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x61, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x24, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x52, 0x6f, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x2e, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x21, 0x2e,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x41, 0x70, 0x70, 0x52,
	0x6f, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x41, 0x70, 0x70, 0x52, 0x6f,
	0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x64, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b,
	0x38, 0x53, 0x41, 0x75, 0x74, 0x68, 0x12, 0x25, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72,
	0x65, 0x64, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b,
	0x38, 0x53, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x38, 0x53, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x38, 0x53, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x28, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x38, 0x53, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x38, 0x53, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4b, 0x38, 0x53, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4b, 0x38, 0x53, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x25, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63,
	0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x28, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0e, 0x5a, 0x0c, 0x2f, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x63, 0x72, 0x65, 0x64, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vault_cred_proto_rawDescOnce sync.Once
	file_vault_cred_proto_rawDescData = file_vault_cred_proto_rawDesc
)

func file_vault_cred_proto_rawDescGZIP() []byte {
	file_vault_cred_proto_rawDescOnce.Do(func() {
		file_vault_cred_proto_rawDescData = protoimpl.X.CompressGZIP(file_vault_cred_proto_rawDescData)
	})
	return file_vault_cred_proto_rawDescData
}

var file_vault_cred_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_vault_cred_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_vault_cred_proto_goTypes = []interface{}{
	(StatusCode)(0),                               // 0: vaultcredpb.StatusCode
	(SecretAccess)(0),                             // 1: vaultcredpb.SecretAccess
	(*PingRequest)(nil),                           // 2: vaultcredpb.PingRequest
	(*PingResponse)(nil),                          // 3: vaultcredpb.PingResponse
	(*SecretPathRef)(nil),                         // 4: vaultcredpb.SecretPathRef
	(*ConfigureVaultSecretRequest)(nil),           // 5: vaultcredpb.ConfigureVaultSecretRequest
	(*ConfigureVaultSecretResponse)(nil),          // 6: vaultcredpb.ConfigureVaultSecretResponse
	(*GetCredentialRequest)(nil),                  // 7: vaultcredpb.GetCredentialRequest
	(*GetCredentialResponse)(nil),                 // 8: vaultcredpb.GetCredentialResponse
	(*PutCredentialRequest)(nil),                  // 9: vaultcredpb.PutCredentialRequest
	(*PutCredentialResponse)(nil),                 // 10: vaultcredpb.PutCredentialResponse
	(*DeleteCredentialRequest)(nil),               // 11: vaultcredpb.DeleteCredentialRequest
	(*DeleteCredentialResponse)(nil),              // 12: vaultcredpb.DeleteCredentialResponse
	(*CreateAppRoleTokenRequest)(nil),             // 13: vaultcredpb.CreateAppRoleTokenRequest
	(*CreateAppRoleTokenResponse)(nil),            // 14: vaultcredpb.CreateAppRoleTokenResponse
	(*DeleteAppRoleRequest)(nil),                  // 15: vaultcredpb.DeleteAppRoleRequest
	(*DeleteAppRoleResponse)(nil),                 // 16: vaultcredpb.DeleteAppRoleResponse
	(*GetCredentialWithAppRoleTokenRequest)(nil),  // 17: vaultcredpb.GetCredentialWithAppRoleTokenRequest
	(*GetCredentialWithAppRoleTokenResponse)(nil), // 18: vaultcredpb.GetCredentialWithAppRoleTokenResponse
	(*SecretPolicy)(nil),                          // 19: vaultcredpb.secretPolicy
	(*CreateK8SAuthRoleRequest)(nil),              // 20: vaultcredpb.CreateK8SAuthRoleRequest
	(*CreateK8SAuthRoleResponse)(nil),             // 21: vaultcredpb.CreateK8SAuthRoleResponse
	(*UpdateK8SAuthRoleRequest)(nil),              // 22: vaultcredpb.UpdateK8SAuthRoleRequest
	(*UpdateK8SAuthRoleResponse)(nil),             // 23: vaultcredpb.UpdateK8SAuthRoleResponse
	(*DeleteK8SAuthRoleRequest)(nil),              // 24: vaultcredpb.DeleteK8SAuthRoleRequest
	(*DeleteK8SAuthRoleResponse)(nil),             // 25: vaultcredpb.DeleteK8SAuthRoleResponse
	(*AddClusterK8SAuthRequest)(nil),              // 26: vaultcredpb.AddClusterK8SAuthRequest
	(*AddClusterK8SAuthResponse)(nil),             // 27: vaultcredpb.AddClusterK8SAuthResponse
	(*DeleteClusterK8SAuthRequest)(nil),           // 28: vaultcredpb.DeleteClusterK8SAuthRequest
	(*DeleteClusterK8SAuthResponse)(nil),          // 29: vaultcredpb.DeleteClusterK8SAuthResponse
	nil,                                           // 30: vaultcredpb.GetCredentialResponse.CredentialEntry
	nil,                                           // 31: vaultcredpb.PutCredentialRequest.CredentialEntry
	nil,                                           // 32: vaultcredpb.GetCredentialWithAppRoleTokenResponse.CredentialEntry
}
var file_vault_cred_proto_depIdxs = []int32{
	0,  // 0: vaultcredpb.PingResponse.status:type_name -> vaultcredpb.StatusCode
	4,  // 1: vaultcredpb.ConfigureVaultSecretRequest.SecretPathData:type_name -> vaultcredpb.SecretPathRef
	0,  // 2: vaultcredpb.ConfigureVaultSecretResponse.status:type_name -> vaultcredpb.StatusCode
	30, // 3: vaultcredpb.GetCredentialResponse.credential:type_name -> vaultcredpb.GetCredentialResponse.CredentialEntry
	31, // 4: vaultcredpb.PutCredentialRequest.credential:type_name -> vaultcredpb.PutCredentialRequest.CredentialEntry
	0,  // 5: vaultcredpb.DeleteAppRoleResponse.status:type_name -> vaultcredpb.StatusCode
	32, // 6: vaultcredpb.GetCredentialWithAppRoleTokenResponse.credential:type_name -> vaultcredpb.GetCredentialWithAppRoleTokenResponse.CredentialEntry
	1,  // 7: vaultcredpb.secretPolicy.access:type_name -> vaultcredpb.SecretAccess
	19, // 8: vaultcredpb.CreateK8SAuthRoleRequest.secretPolicy:type_name -> vaultcredpb.secretPolicy
	0,  // 9: vaultcredpb.CreateK8SAuthRoleResponse.status:type_name -> vaultcredpb.StatusCode
	19, // 10: vaultcredpb.UpdateK8SAuthRoleRequest.secretPolicy:type_name -> vaultcredpb.secretPolicy
	0,  // 11: vaultcredpb.UpdateK8SAuthRoleResponse.status:type_name -> vaultcredpb.StatusCode
	0,  // 12: vaultcredpb.DeleteK8SAuthRoleResponse.status:type_name -> vaultcredpb.StatusCode
	0,  // 13: vaultcredpb.AddClusterK8SAuthResponse.status:type_name -> vaultcredpb.StatusCode
	0,  // 14: vaultcredpb.DeleteClusterK8SAuthResponse.status:type_name -> vaultcredpb.StatusCode
	7,  // 15: vaultcredpb.VaultCred.GetCredential:input_type -> vaultcredpb.GetCredentialRequest
	9,  // 16: vaultcredpb.VaultCred.PutCredential:input_type -> vaultcredpb.PutCredentialRequest
	11, // 17: vaultcredpb.VaultCred.DeleteCredential:input_type -> vaultcredpb.DeleteCredentialRequest
	13, // 18: vaultcredpb.VaultCred.CreateAppRoleToken:input_type -> vaultcredpb.CreateAppRoleTokenRequest
	15, // 19: vaultcredpb.VaultCred.DeleteAppRole:input_type -> vaultcredpb.DeleteAppRoleRequest
	17, // 20: vaultcredpb.VaultCred.GetCredentialWithAppRoleToken:input_type -> vaultcredpb.GetCredentialWithAppRoleTokenRequest
	26, // 21: vaultcredpb.VaultCred.AddClusterK8SAuth:input_type -> vaultcredpb.AddClusterK8SAuthRequest
	28, // 22: vaultcredpb.VaultCred.DeleteClusterK8SAuth:input_type -> vaultcredpb.DeleteClusterK8SAuthRequest
	20, // 23: vaultcredpb.VaultCred.CreateK8SAuthRole:input_type -> vaultcredpb.CreateK8SAuthRoleRequest
	22, // 24: vaultcredpb.VaultCred.UpdateK8SAuthRole:input_type -> vaultcredpb.UpdateK8SAuthRoleRequest
	24, // 25: vaultcredpb.VaultCred.DeleteK8SAuthRole:input_type -> vaultcredpb.DeleteK8SAuthRoleRequest
	5,  // 26: vaultcredpb.VaultCred.ConfigureVaultSecret:input_type -> vaultcredpb.ConfigureVaultSecretRequest
	8,  // 27: vaultcredpb.VaultCred.GetCredential:output_type -> vaultcredpb.GetCredentialResponse
	10, // 28: vaultcredpb.VaultCred.PutCredential:output_type -> vaultcredpb.PutCredentialResponse
	12, // 29: vaultcredpb.VaultCred.DeleteCredential:output_type -> vaultcredpb.DeleteCredentialResponse
	14, // 30: vaultcredpb.VaultCred.CreateAppRoleToken:output_type -> vaultcredpb.CreateAppRoleTokenResponse
	16, // 31: vaultcredpb.VaultCred.DeleteAppRole:output_type -> vaultcredpb.DeleteAppRoleResponse
	18, // 32: vaultcredpb.VaultCred.GetCredentialWithAppRoleToken:output_type -> vaultcredpb.GetCredentialWithAppRoleTokenResponse
	27, // 33: vaultcredpb.VaultCred.AddClusterK8SAuth:output_type -> vaultcredpb.AddClusterK8SAuthResponse
	29, // 34: vaultcredpb.VaultCred.DeleteClusterK8SAuth:output_type -> vaultcredpb.DeleteClusterK8SAuthResponse
	21, // 35: vaultcredpb.VaultCred.CreateK8SAuthRole:output_type -> vaultcredpb.CreateK8SAuthRoleResponse
	23, // 36: vaultcredpb.VaultCred.UpdateK8SAuthRole:output_type -> vaultcredpb.UpdateK8SAuthRoleResponse
	25, // 37: vaultcredpb.VaultCred.DeleteK8SAuthRole:output_type -> vaultcredpb.DeleteK8SAuthRoleResponse
	6,  // 38: vaultcredpb.VaultCred.ConfigureVaultSecret:output_type -> vaultcredpb.ConfigureVaultSecretResponse
	27, // [27:39] is the sub-list for method output_type
	15, // [15:27] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_vault_cred_proto_init() }
func file_vault_cred_proto_init() {
	if File_vault_cred_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vault_cred_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretPathRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureVaultSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureVaultSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppRoleTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppRoleTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialWithAppRoleTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialWithAppRoleTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateK8SAuthRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateK8SAuthRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateK8SAuthRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateK8SAuthRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteK8SAuthRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteK8SAuthRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddClusterK8SAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddClusterK8SAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterK8SAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_cred_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterK8SAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vault_cred_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vault_cred_proto_goTypes,
		DependencyIndexes: file_vault_cred_proto_depIdxs,
		EnumInfos:         file_vault_cred_proto_enumTypes,
		MessageInfos:      file_vault_cred_proto_msgTypes,
	}.Build()
	File_vault_cred_proto = out.File
	file_vault_cred_proto_rawDesc = nil
	file_vault_cred_proto_goTypes = nil
	file_vault_cred_proto_depIdxs = nil
}
