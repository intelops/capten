name: Build and publish capten CLI

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*' # Only build on tags that match the 'vX.Y.Z' pattern

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.20'
      
      - name: Build my CLI for Linux
        run: go mod download && CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o capten-linux cmd/main.go
      
      - name: Build my CLI for macOS
        run: go mod download && GOOS=darwin GOARCH=amd64 go build -o capten-macos cmd/main.go
      
      - name: Build my CLI for Windows
        run: go mod download && GOOS=windows GOARCH=amd64 go build -o capten-windows.exe cmd/main.go
       
      # - name: Get release name from tag
      #   id: release
      #   run: echo "name=$(echo ${GITHUB_REF#refs/tags/})" > "env.txt"
      #   env:
      #     GITHUB_REF: ${{ github.ref }}

      - name: Set release tag as env
        id: release
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Check release tag
        env:
          RELEASE_VERSION: ${{ steps.release.outputs.tag }}
        run: |
          echo $RELEASE_VERSION
          echo ${{ steps.release.outputs.tag }}
          echo ${{ github.ref }}
      
      # - name: Create release for Linux
      #   if: steps.release.outputs.name != ''
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: capten-linux
      #     tag_name: ${{ steps.release.outputs.name }}
      #     name: ${{ steps.release.outputs.name }} - Linux
      #     draft: false
      #     prerelease: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Create release for macOS
      #   if: steps.release.outputs.name != ''
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: capten-macos
      #     tag_name: ${{ steps.release.outputs.name }}
      #     name: ${{ steps.release.outputs.name }} - macOS
      #     draft: false
      #     prerelease: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Create release for Windows
      #   if: steps.release.outputs.name != ''
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: capten-windows.exe
      #     tag_name: ${{ steps.release.outputs.name }}
      #     name: ${{ steps.release.outputs.name }} - Windows
      #     draft: false
      #     prerelease: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Upload artifacts
      #   if: steps.release.outputs.name == ''
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: capten-binaries
      #     path: |
      #       capten-linux
      #       capten-macos
      #       capten-windows.exe

      # Todo: We can use this action to get tag value too
      - uses: nowsprinting/check-version-format-action@v3
        id: version
        with:
          prefix: 'v'

      - name: Zip artifacts
        if: steps.version.outputs.is_stable == 'true'
        run: |
          mkdir artifacts
          mv capten-linux artifacts
          mv capten-macos artifacts
          mv capten-windows.exe artifacts
          cp README.md artifacts/README.md
          cp config/aws_talos_config.yaml artifacts/aws_talos_config.yaml
          zip -r artifacts.zip artifacts
      
      - name: Create Github release
        if: steps.version.outputs.is_stable == 'true'
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release.outputs.tag }}
          release_name: ${{ steps.release.outputs.tag }}
      
      - name: Upload Artifacts
        if: steps.version.outputs.is_stable == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./artifacts.zip
          asset_name: artifacts.zip
          asset_content_type: application